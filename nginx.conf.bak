
#user  nobody;
worker_processes  1;

error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    use epoll;
    worker_connections  10240;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    server_names_hash_bucket_size 128;
    client_header_buffer_size 32k;
    large_client_header_buffers 4 32k;
    client_max_body_size 220m;

    server_tokens off;
    tcp_nodelay on;

    sendfile        on;
    tcp_nopush     on;

    resolver 8.8.8.8;
    #resolver 202.106.46.151;

    #keepalive_timeout  0;
    keepalive_timeout  120;

    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_comp_level 2;
    gzip_min_length 1k;
    gzip_buffers 4 16k;
    gzip_http_version 1.1;
    gzip_types text/plain application/x-javascript text/css application/xml application/javascript;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    # default virtual host using mix of IP-, name-, and port-based configuration
    server {
        listen       80;
        #server_name  localhost;

        charset utf-8;

        #access_log  logs/host.access.log  main;

        location / {

            set $realurl "";

            #access_by_lua '
            #    --local args = nil
            #    --local project = nil
            #    --local object = nil
            #    --local action = nil
            #    --local request_method = ngx.var.request_method

            #    --获取参数的值
            #    --if "GET" == request_method then
            #        --args = ngx.req.get_uri_args()
            #    --elseif "POST" == request_method then
            #        --ngx.req.read_body()
            #        --args = ngx.req.get_post_args()
            #    --end

            #    --project = args["project"]
            #    --object = args["object"]
            #    --action = args["action"]
                
            #    --local res = ngx.location.capture(
            #        --"/auth",
            #        --{args = {project = project,object = object, action = action}}
            #        --);

            #    --if( res.status == 200 and res.body ~= "0" ) then
            #        --ngx.var.realurl = res.body
            #    --else
            #        --ngx.exit(403)
            #    --end
            #';

            rewrite_by_lua '
                local args = nil;
                local project = nil;
                local object = nil;
                local action = nil;
                local apiuri = nil;
                local request_method = ngx.var.request_method;

                --获取参数的值
                if "GET" == request_method then
                    args = ngx.req.get_uri_args();
                elseif "POST" == request_method then
                    ngx.req.read_body();
                    args = ngx.req.get_post_args();
                end

                project = args["project"];
                object = args["object"];
                action = args["action"];
                apiuri = string.format("Api-%s-%s-%s", project, object, action);

                local redis = require "resty.redis";

                local instance = redis:new();

                local host = "10.0.2.41";
                local port = 6379;


                local ok, err = instance:connect(host, port);
                if not ok then
                    ngx.log(ngx.ERR, err);
                    ngx.exit(500);
                end

                --instance:set(apiuri, "http://alpha.enlink-mob.com/enlinkcms3/index.php/api/apiCheck");

                local urls = instance:get(apiuri);
                instance:close();

                --ngx.header.content_type = "text/plain";
                --ngx.say((urls == ""));

                if(urls == "" or tostring(urls) == "userdata: NULL") then
                    ngx.exit(404);
                else
                    ngx.var.realurl = urls;
                end
            ';

            proxy_pass $realurl;
            proxy_set_header   Host    $host;
            proxy_set_header   X-Real-IP   $remote_addr;
            proxy_set_header   X-Forwarded-Proto  $scheme;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_intercept_errors on;
        }

        location /auth {
            internal;
            #proxy_pass  "http://alpha.enlink-mob.com/enlinkcms3/index.php/api/apiCheck";
            #proxy_set_header Accept-Encoding '';
            #proxy_set_header   Host    $host;
            #proxy_set_header   X-Real-IP   $remote_addr;
            #proxy_set_header   X-Forwarded-Proto  $scheme;
            #proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            #proxy_intercept_errors on;
        }

        location /jsapi {
            rewrite_by_lua '
                --jsapi访问控制
                local sign = ngx.md5("jsapi" .. ngx.var.remote_addr)
                if (ngx.var.cookie_sign ~= sign) then
                    add_header Set-Cookie "sign=" .. sign;
                    rewrite .* "$scheme://$host$uri" redirect;
                end
            ';
        }

        location /t {
            content_by_lua_file conf/lua/rsa_encrypt.lua;
        }

        

        # redirect server error pages to the static page /50x.html
        #
        #error_page   404              /404.html;
        #error_page   500 502 503 504  /50x.html;
        #location = /50x.html {
        #    root   html;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
